#!/usr/bin/perl
################################################################################
#
#   Copyright 2015 Stefan Majewsky <majewsky@gmx.net>
#
#   This program is free software; you can redistribute it and/or modify it
#   under the terms of the GNU General Public License as published by the Free
#   Software Foundation; either version 2 of the License, or (at your option)
#   any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT
#   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
#   more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
################################################################################

use strict;
use warnings;
use v5.18;

use File::Find ();
use Getopt::Long qw(:config bundling);
use List::MoreUtils qw(any);

# this program needs root privileges (or else scanning of the root filesystems
# will not produce reliable results)
unless ($< == 0) {
   # if not run as root, try to use "sudo" to obtain root privileges;
   # the `-k` switch causes sudo to disregard cached authentications and ask
   # for the password again, in order to make it abundantly clear that we're
   # performing a privilege elevation; the user can always skip this password
   # entry by prepending "sudo" to this command on the shell as usual
   exec 'sudo', '-k', $^X, $0, @ARGV
      or die "this program needs to be run as root\n";
}

################################################################################
# step 0: parse command line

my $OPT_VERBOSE = 0;

# TODO: --help
GetOptions(
   'verbose' => \$OPT_VERBOSE,
) or die 'command line is fishy';

################################################################################
# step 1: determine filesystem layout
#
# We need to do this in order to determine where to look for "system files".
# "System files" are all persistent files which are not below /home or contained
# in virtual filesystems (/dev, /proc, /run, /sys and the like).

my %FILESYSTEMS;

sub step1_scan_filesystems {
   say "Scanning filesystems..."
      if $OPT_VERBOSE;
   open my $fh, '<', '/proc/self/mounts'
      or die "cannot open /proc/self/mounts: $!";

   # reset output variables
   %FILESYSTEMS = map { $_ => [] } qw(virtual system user);

   # top-level directories specified by the FHS (usually provided by Arch
   # Linux's filesystem package)
   my @fhs_topleveldirs = qw(
      bin boot dev etc home lib media mnt opt proc root sbin srv tmp usr var
   );

   while (my $line = <$fh>) {
      my ($source, $dest, $fstype) = split /\s+/, $line;
      my $classification; # will be one of qw(system user virtual)

      # ignore the bogus mount of "rootfs -> /" that initializes Linux's VFS
      next if $source eq 'rootfs' and $dest eq '/';

      # the root FS is definitely a system partition :)
      if ($dest eq '/') {
         $classification = 'system';
      }
      # skip virtual filesystems (where $source is not a device file)
      elsif ($source !~ m{/}) {
         $classification = 'virtual';
      }
      # skip /home (this is a system backup, user data not included)
      elsif ($dest =~ m{^/home}) {
         $classification = 'user';
      }
      # include filesystems below / which contain parts of the directories
      # governed by the FHS (e.g. /boot or /usr are sometimes found on separate
      # partitions)
      elsif (any { $dest =~ m{^/$_(?:/|$)} } @fhs_topleveldirs) {
         $classification = 'system';
      }
      # all other mounts probably contain user data
      else {
         $classification = 'user';
      }

      # put into output hash
      push @{ $FILESYSTEMS{$classification} }, $dest;
      # report for --verbose
      if ($OPT_VERBOSE) {
         my $classification_str = {
            virtual => '[virtual FS]',
            system  => '[syst. data]',
            user    => '[user  data]',
         }->{$classification};
         say "\t$classification_str $dest";
      }
   }

   # short report (this one is always visible, even without --verbose)
   my @sys_fs       = @{ $FILESYSTEMS{system} };
   my $sys_fs_count = @sys_fs;
   my $sys_fs_join  = join ' ', sort @sys_fs;
   say "Found $sys_fs_count system partitions ($sys_fs_join)";
   die "No system partitions found; exiting"
      unless @sys_fs;

   return;
}

step1_scan_filesystems();

################################################################################
# step 2: find files not owned by any packages

my @UNPACKAGED_FILES;

sub step2_find_unpackaged_files {
   # list files belonging to packages
   print "Listing files belonging to packages... "
      if $OPT_VERBOSE;
   open my $fh, '-|', qw(pacman -Ql)
      or die "cannot exec `pacman -Ql`: $!";

   my %is_known_file = (
      '/' => 1,
   );
   while (my $line = <$fh>) {
      chomp $line;
      my ($package_name, $file_name) = split /\s/, $line, 2;
      $is_known_file{$file_name} = 1;
   }

   close $fh;
   if ($OPT_VERBOSE) {
      my $file_count = keys %is_known_file;
      say "$file_count files and directories found";
   }

   # when scanning filesystem, don't traverse into user data or virtual filesystems;
   # also, skip the "lost+found" directories found in the root directories of some
   # filesystems and pacman's package cache (TODO: this should be located by
   # reading /etc/pacman.conf or through libalpm)
   my %is_skipped_directory = map { $_ => 1 } (
      @{ $FILESYSTEMS{user} },
      @{ $FILESYSTEMS{virtual} },
      '/home',
      '/var/cache/pacman/pkg',
      ( map { $_ eq '/' ? '/lost+found' : "$_/lost+found" } (
         @{ $FILESYSTEMS{user} },
         @{ $FILESYSTEMS{system} },
      )),
   );

   # find files/directories on system partitions that are not contained in any
   # packages (this operation will probably take long, so we always report that
   # this is currently running)
   say "Scanning for files not belonging to any packages...";
   File::Find::find({
      no_chdir   => 1,
      wanted     => sub {
         my $path = $File::Find::name; # absolute path of currently examined dir/file

         # skip this directory?
         if ($is_skipped_directory{$path}) {
            $File::Find::prune = 1;
            return;
         }

         # known file or directory?
         if ($is_known_file{$path} or $is_known_file{"$path/"}) {
            # don't prune! we want to examine directory contents for unknown
            # files even if directory is known
            return;
         }

         # don't traverse into unknown directories any further; we'll be
         # backing up the whole directory anyway
         $File::Find::prune = 1;

         # TODO: this is obviously not finished; compile a file list and then
         # make an archive of these files
         say $path;
      },
   }, '/');

   die "TODO: finish implementation";
}

step2_find_unpackaged_files();
